#define pb push_back

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        cout.tie(NULL);
        
        int n = nums.size();
        if(n == 0)
            return {};
        vector<int> v;
        int dp[n],ind = 0,res = 1,i,j;
        vector<int> prev(n,-1);
        for(i=0;i<n;i++)
            dp[i] = 1;
        //memset(dp,1,sizeof(dp));          Same as above
        sort(nums.begin(),nums.end());
       
        for(i=1;i<n;i++){
            for(j=0;j<i;j++){
                if((nums[i] % nums[j]) == 0 and dp[j] + 1 > dp[i]){
        
                    dp[i] =1 + dp[j];
                    prev[i] = j;    
                }
            }
             
            if(dp[i] > res){
                res = dp[i];
                ind = i;
            }
           
        }
      //  cout<<res<<" ";       size of resultant vector
        while(ind >= 0){
            v.pb(nums[ind]);
            if(ind == 0)    break;
            ind = prev[ind];
        }
       reverse(v.begin(),v.end());
       return v; 
    }
};
